version: "3.2"
services:
  #db: use Maria DB as our backend DB
  db:
    image: mariadb
    ports:
      - "<%=dbPort%>:3306"
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /secret/password
    volumes:
      - type: bind
        source: ./mysql/conf.d/my.cnf
        target: /etc/mysql/conf.d/my.cnf
      - type: bind
        source: ./mysql/init
        target: /docker-entrypoint-initdb.d
      - type: bind
        source: ./mysql/data
        target: /var/lib/mysql
      # - type: bind
      #   source: ./mysql/conf.d
      #   target: /etc/mysql/conf.d
      - type: bind
        source: ./mysql/key
        target: /key
      - type: bind
        source: ./mysql/password
        target: /secret/password
    # when there is a problem with : Error: ER_CRASHED_ON_USAGE: Table 'AAAAAA' is marked as crashed and should be repaired
    # this can happen with the alter table algorithm: try the safest(and slowest) COPY
    # command: ["mysqld", "--alter-algorithm=copy"]
    # on windows: use this command. (be sure to clear out mysql/data folder)
    # command: mysqld --innodb-flush-method=littlesync --innodb-use-native-aio=OFF --log_bin=ON
  #/db

  #api_sails: the AppBuilder Developer Container
  api_sails:
    image: skipdaddy/install-ab:developer_v2
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "1337:1337"
      # - "9229:9229"
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
    volumes:
      - type: bind
        source: ./config/local.js
        target: /app/config/local.js
      - type: bind
        source: ./data
        target: /app/data
    # use app_cli.js when you need to connect to the cli of the container
    # and then run setup on a sub module. This is especially useful when
    # sails is crashing and won't let you connect.
    # command: ["node", "app_cli.js"]
    command: ["node", "--inspect", "--max-old-space-size=2048", "--stack-size=2048", "app_waitForMySql.js"]
  #/api_sails


  #redis: use redis to allow cote services to find each other across a swarm
  redis:
    image: redis
    #ports:
    #  - 6379:6379
    volumes:
      - type: bind
        source: ./redis/data
        target: /data
    command: redis-server --appendonly yes
  #/redis