name: Dev Install Test
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
jobs:
  Dev-Install-Test:
    name: Dev Install & Test on Node ${{ matrix.node }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # gh macos runnners does not come with docker, could not get it installed
        # see: https://github.community/t/is-it-possible-to-install-and-configure-docker-on-macos-runner/16981/3
        # windows runner does not suppport linux containers
        # see:
        os: [ubuntu-latest] #, windows-latest] #,macos-latest]
        node: [18, 20, 21]
    env:
         CYPRESS_RESPONSE_TIMEOUT: 200000
         CYPRESS_DEFAULT_COMMAND_TIMEOUT: 30000
         CYPRESS_RETRIES: 2
    steps:
      # - name: Install Docker (Macos)
      #   if: ${{ matrix.os == 'macos-latest'}}
      #   run: |
      #     brew install docker-machine docker
      #     docker-machine create default
      #     docker-machine env default
      #     eval "$(docker-machine env default)"
      #     docker ps

      - name: Checkout ab-cli
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install npm packages
        run: npm i

      - name: Initialize docker swarm
        run: docker swarm init --advertise-addr 127.0.0.1

      - name: Install AppBuilder
        env:
          TENANT_PASSWORD: "admin123!@#"
        run: |
          echo "Installing AppBuilder with secure password..."
          node index.js install ab-test --stack=ab-test --port=80 --tag=latest --dbExpose=true --dbPort=8888 --dbPassword=root --authType=login --relayEnabled=false --siteURL=http://localhost:80 --tenant.username=admin --tenant.password=$TENANT_PASSWORD --tenant.email=admin@email.com --tenant.url=http://localhost:80 --platform=podman

      # Give some time for the stack to come down fully
      - run: sleep 15

      - name: Launch Main Stack
        run: ./UP.sh -t -q
        working-directory: ./ab-test

      - name: Wait for AB (Main Stack)
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http://localhost:80
          timeout: 300000

      - name: Run Cypress Tests (Main Stack)
        run: npm run test:e2e:ab-runtime -- --browser chrome
        working-directory: ./ab-test

      - name: Take Down Main Stack
        run: ./Down.sh
        working-directory: ./ab-test

      # - name: Setup Test Stack
      #   working-directory: ./ab-test
      #   run: node ../index.js test setup ab

      # - name: Launch Test Stack
      #   working-directory: ./ab-test
      #   run: npm run test:boot && node ../index.js test waitBoot ab
      #
      # - run: npm install pm2@latest -g
      # - name: Save Logs
      #   run: pm2 start ./logs.js -- --toFile logs/ABServices.log
      #   working-directory: ./ab-test
      #
      # - name: Wait for AB (Test Stack)
      #   uses: ifaxity/wait-on-action@v1
      #   with:
      #     resource: http://localhost:8088
      #     timeout: 300000
      #
      # - name: Run Cypress Tests (Test Stack)
      #   run: npm run test:e2e:ab-runtime -- --browser chrome
      #   working-directory: ./ab-test
      #
      # - uses: actions/upload-artifact@v2
      #   if: failure()
      #   with:
      #     name: cypress-screenshots
      #     path: ./ab-test/test/e2e/cypress/screenshots

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ABServices.log
          path: ./ab-test/logs/ABServices.log

      # - name: Take Down Test Stack
        # run: node ../index.js test down ab
  podman-install-test:
    name: Podman Install
    runs-on: ubuntu-latest
    env:
         CYPRESS_RESPONSE_TIMEOUT: 200000
         CYPRESS_DEFAULT_COMMAND_TIMEOUT: 30000
         CYPRESS_RETRIES: 2
    steps:
      - run: sudo apt-get update & sudo apt-get -y install podman & systemctl --user enable --now podman.socket
      # connect Docker CLI to Podman's socket
      - run: export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock


      - run: podman version
      - run: podman compose --help

      - name: Checkout ab-cli
        uses: actions/checkout@v4

      - name: Install npm packages
        run: npm i

      - name: Ensure clean enviroment
        run: rm -rf ./ab-test

      - name: Install AppBuilder
        env:
          TENANT_PASSWORD: "admin123!@#"
        run: |
          echo "Installing AppBuilder with secure password..."
          node index.js install ab-test --stack=ab-test --port=80 --tag=latest --dbExpose=true --dbPort=8888 --dbPassword=root --authType=login --relayEnabled=false --siteURL=http://localhost:80 --tenant.username=admin --tenant.password=$TENANT_PASSWORD --tenant.email=admin@email.com --tenant.url=http://localhost:80 --platform=podman

      # Give some time for the stack to come down fully
      - run: sleep 15
      - name: Launch Main Stack
        run: ./UP.sh -t -q
        working-directory: ./ab-test

      - name: Check Database Logs
        run: |
          echo "Checking database logs..."
          podman logs $(podman ps -q -f name=ab-test_db) | tail -n 50
        working-directory: ./ab-test

      - name: Check Tenant Setup
        run: |
          echo "Listing all running containers..."
          podman ps -a
          echo "\nWaiting for database to be ready..."
          sleep 90
          echo "\nTrying to find database container..."
          DB_CONTAINER=$(podman ps -a --filter name=db --format "{{.Names}}")
          echo "Found containers matching 'db': $DB_CONTAINER"
          if [ -n "$DB_CONTAINER" ]; then
            echo "\nChecking tenant setup in container: $DB_CONTAINER"
            podman exec -i $DB_CONTAINER mysql -uroot -proot "appbuilder-admin" -e "SELECT username, email, salt FROM SITE_USER WHERE username='admin';"
            echo "\nChecking .env file for Cypress settings..."
            cat .env | grep CYPRESS
          else
            echo "No database container found!"
          fi
        working-directory: ./ab-test

      - name: Test Login
        run: |
          echo "Testing login with credentials..."
          curl -X POST http://localhost:80/auth/login \
            -H "Content-Type: application/json" \
            -d '{"tenant":"admin","email":"admin@email.com","password":"admin123!@#"}'
        working-directory: ./ab-test

      - name: Wait for AB (Main Stack)
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http://localhost:80
          timeout: 300000

      - name: Run Cypress Tests (Main Stack)
        run: npm run test:e2e:ab-runtime -- --browser chrome
        working-directory: ./ab-test

      - name: Take Down Main Stack
        run: ./Down.sh
        working-directory: ./ab-test

